name: Build and Test with Log

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      build_status: ${{ steps.set-build-status.outputs.build_status }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start log file (Lines 1 & 2)
        id: start-log
        run: |
          echo "$(date -Iminutes)" > log.txt       # Line 1: the date/time
          echo "Itay Boros, Noga Sapir Hen, Sagi Levhar" >> log.txt  # Line 2
          
      - name: Log in Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images
        id: build-images
        continue-on-error: true
        run: |
          cd stocks
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/stocks .
          docker tag ${{ secrets.DOCKER_USERNAME }}/stocks ${{ secrets.DOCKER_USERNAME }}/stocks:latest
          cd ../capital-gains
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/capital-gains .
          docker tag ${{ secrets.DOCKER_USERNAME }}/capital-gains ${{ secrets.DOCKER_USERNAME }}/capital-gains:latest

      - name: Check build result (Line 3)
        id: set-build-status
        if: always()  # Always run, even if previous step failed
        run: |
          if [ ${{ steps.build-images.outcome }} == "success" ]; then
            echo "image successfully built" >> log.txt
            echo "::set-output name=build_status::success"
          else
            echo "image not able to be built" >> log.txt
            echo "::set-output name=build_status::fail"
          fi

      - name: Push images to Docker Hub
        if: steps.set-build-status.outputs.build_status == 'success'
        run: |
          # Only push if build was successful
          docker push ${{ secrets.DOCKER_USERNAME }}/stocks:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/capital-gains:latest

      - name: Upload partial log
        uses: actions/upload-artifact@v4
        with:
          name: partial-log
          path: log.txt

  tests:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Check out code
        uses: actions/checkout@v4
      
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          
      - name: Download partial log
        uses: actions/download-artifact@v4
        with:
          name: partial-log
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest requests

      - name: Start containers 
        id: start-containers
        continue-on-error: true
        run: |
          docker compose up -d --build
          sleep 10

      - name: Check containers result (Line 4)
        if: always()
        run: |
          if [ ${{ steps.start-containers.outcome }} == "success" ]; then
            echo "Container up and running" >> log.txt
          else
            echo "Container failed to run" >> log.txt
          fi

      - name: Run tests
        id: run-tests
        continue-on-error: true
        run: |
          pytest tests/assn4_test.py -v > assn4_test_results.txt

      - name: Check tests result (Line 5)
        if: always()
        run: |
          if [ ${{ steps.run-tests.outcome }} == "success" ]; then
            echo "tests succeeded" >> log.txt
          else
            echo "tests failed" >> log.txt
          fi

      - name: Upload final log
        uses: actions/upload-artifact@v4
        with:
          name: log-file
          path: log.txt

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: test-results.txt

  query:
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Download log
        uses: actions/download-artifact@v4
        with:
          name: partial-log
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Start containers
        run: |
          docker compose up -d
          sleep 10

      - name: Execute queries
        run: |
          python - <<EOF
          import requests
          import json
          
          # Stock data from assignment
          stocks = [
            {"name":"NVIDIA Corporation", "symbol":"NVDA", "purchase price":134.66, "purchase date":"18-06-2024", "shares":7},
            {"name":"Apple Inc.", "symbol":"AAPL", "purchase price":183.63, "purchase date":"22-02-2024", "shares":19},
            {"name":"Alphabet Inc.", "symbol":"GOOG", "purchase price":140.12, "purchase date":"24-10-2024", "shares":14},
            {"name":"Tesla, Inc.", "symbol":"TSLA", "purchase price":194.58, "purchase date":"28-11-2022", "shares":32},
            {"name":"Microsoft Corporation", "symbol":"MSFT", "purchase price":420.55, "purchase date":"09-02-2024", "shares":35},
            {"name":"Intel Corporation", "symbol":"INTC", "purchase price":19.15, "purchase date":"13-01-2025", "shares":10}
          ]
          requests.delete('http://localhost:5001/stocks')
          
          for stock in stocks:
            response = requests.post('http://localhost:5001/stocks', json=stock)
            print(f"POST /stocks: {response.status_code}, Response: {response.json()}")

          # Process query.txt
          with open('query.txt', 'r') as f:
              queries = f.readlines()

          with open('response.txt', 'w') as f:
              for query in queries:
                  service, qs = query.strip().split(':')
                  print(f"Processing query: {service}, {qs}")

                  if service == 'stocks':
                      url = f'http://localhost:5001/stocks?{qs}'
                  else:
                      url = f'http://localhost:5003/capital-gains?{qs}'

                  response = requests.get(url)
                  print(f"GET {url} Response: {response.status_code}, {response.text}")

                  f.write(f'query: {qs}\n')
                  f.write(f'response: {json.dumps(response.json(), indent=2)}\n')
          EOF

      - name: Upload response file
        uses: actions/upload-artifact@v4
        with:
          name: query-responses
          path: response.txt
