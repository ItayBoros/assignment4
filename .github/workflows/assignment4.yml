name: Build and Test with Log

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      build_status: ${{ steps.set-build-status.outputs.build_status }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start log file (Lines 1 & 2)
        id: start-log
        run: |
          echo "$(date -Iminutes)" > log.txt       # Line 1: the date/time
          echo "Itay Boros, Noga Sapir Hen, Sagi Levhar" >> log.txt  # Line 2
          
      - name: Log in Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images
        id: build-images
        continue-on-error: true
        run: |
          cd stocks
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/stocks .
          docker tag ${{ secrets.DOCKER_USERNAME }}/stocks ${{ secrets.DOCKER_USERNAME }}/stocks:latest
          cd ../capital-gains
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/capital-gains .
          docker tag ${{ secrets.DOCKER_USERNAME }}/capital-gains ${{ secrets.DOCKER_USERNAME }}/capital-gains:latest

      - name: Check build result (Line 3)
        id: set-build-status
        if: always()  # Always run, even if previous step failed
        run: |
          if [ ${{ steps.build-images.outcome }} == "success" ]; then
            echo "image successfully built" >> log.txt
            echo "::set-output name=build_status::success"
          else
            echo "image not able to be built" >> log.txt
            echo "::set-output name=build_status::fail"
          fi

      - name: Push images to Docker Hub
        if: steps.set-build-status.outputs.build_status == 'success'
        run: |
          # Only push if build was successful
          docker push ${{ secrets.DOCKER_USERNAME }}/stocks:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/capital-gains:latest

      - name: Upload partial log
        uses: actions/upload-artifact@v4
        with:
          name: partial-log
          path: log.txt


  tests:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Check out code
        uses: actions/checkout@v4
      
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          
      - name: Download partial log
        uses: actions/download-artifact@v4
        with:
          name: partial-log
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest requests

      - name: Start containers 
        id: start-containers
        continue-on-error: true
        run: |
          docker compose up -d --build
          sleep 10

      - name: Check containers result (Line 4)
        if: always()
        run: |
          if [ ${{ steps.start-containers.outcome }} == "success" ]; then
            echo "Container up and running" >> log.txt
          else
            echo "Container failed to run" >> log.txt
          fi

      - name: Run tests
        id: run-tests
        continue-on-error: true
        run: |
          pytest tests/assn4_test.py -v > test-results.txt

      - name: Check tests result (Line 5)
        if: always()
        run: |
          if [ ${{ steps.run-tests.outcome }} == "success" ]; then
            echo "tests succeeded" >> log.txt
          else
            echo "tests failed" >> log.txt
          fi

      - name: Upload final log
        uses: actions/upload-artifact@v4
        with:
          name: log-file
          path: log.txt

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: test-results.txt
